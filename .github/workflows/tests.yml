name: Tests

on:
  push:
    branches: [ main, master, develop, lutfi-test ]
  workflow_dispatch:

jobs:
  unit-tests:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: laravel_testing
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, dom, fileinfo, mysql, pdo_mysql
        coverage: none

    - name: Copy .env
      run: cp .env.example .env

    - name: Update .env for CI
      run: |
        sed -i 's/DB_CONNECTION=.*/DB_CONNECTION=mysql/' .env
        sed -i 's/DB_HOST=.*/DB_HOST=127.0.0.1/' .env
        sed -i 's/DB_PORT=.*/DB_PORT=3306/' .env
        sed -i 's/DB_DATABASE=.*/DB_DATABASE=laravel_testing/' .env
        sed -i 's/DB_USERNAME=.*/DB_USERNAME=root/' .env
        sed -i 's/DB_PASSWORD=.*/DB_PASSWORD=password/' .env

    - name: Install Composer Dependencies
      run: composer install --no-interaction --prefer-dist --optimize-autoloader

    - name: Generate Application Key
      run: php artisan key:generate

    - name: Run Database Migrations
      run: php artisan migrate --force

    - name: Seed Database
      run: php artisan db:seed --force

    - name: Run Unit Tests
      run: ./vendor/bin/pest

  e2e-tests:
    runs-on: ubuntu-latest
    needs: unit-tests
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: laravel_testing
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, dom, fileinfo, mysql, pdo_mysql
        coverage: none

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Copy .env
      run: cp .env.example .env

    - name: Update .env for CI
      run: |
        sed -i 's/DB_CONNECTION=.*/DB_CONNECTION=mysql/' .env
        sed -i 's/DB_HOST=.*/DB_HOST=127.0.0.1/' .env
        sed -i 's/DB_PORT=.*/DB_PORT=3306/' .env
        sed -i 's/DB_DATABASE=.*/DB_DATABASE=laravel_testing/' .env
        sed -i 's/DB_USERNAME=.*/DB_USERNAME=root/' .env
        sed -i 's/DB_PASSWORD=.*/DB_PASSWORD=password/' .env
        echo "APP_URL=http://localhost:8000" >> .env

    - name: Install Composer Dependencies
      run: composer install --no-interaction --prefer-dist --optimize-autoloader

    - name: Install NPM Dependencies
      run: npm ci

    - name: Generate Application Key
      run: php artisan key:generate

    - name: Build Frontend Assets
      run: npm run build

    - name: Run Database Migrations
      run: php artisan migrate --force

    - name: Seed Database
      run: php artisan db:seed --force
      
    - name: Verify admin user exists
      run: |
        php artisan tinker --execute="
        \$user = \Webkul\User\Models\User::where('email', 'admin@example.com')->first();
        if (!\$user) {
          echo 'Creating admin user...';
          \Webkul\User\Models\User::create([
            'name' => 'Example Admin',
            'email' => 'admin@example.com',
            'password' => bcrypt('admin123'),
            'role_id' => 1,
            'status' => 1,
            'view_permission' => 'global'
          ]);
          echo 'Admin user created successfully';
        } else {
          echo 'Admin user already exists: ' . \$user->email;
        }
        "

    - name: Install Playwright Browsers
      run: npx playwright install --with-deps chromium

    - name: Start Laravel Server
      run: |
        php artisan serve --no-reload &
        sleep 10
        
    - name: Verify server is running
      run: |
        curl -f http://localhost:8000 || echo "Server check failed but continuing..."

    - name: Run E2E Tests
      run: npx playwright test --project=chromium --workers=2
      env:
        CI: true

    - name: Upload Playwright Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report
        path: playwright-report/
        retention-days: 30